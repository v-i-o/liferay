/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cz.actum.portlet.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import cz.actum.portlet.model.News;
import cz.actum.portlet.model.NewsModel;
import cz.actum.portlet.model.NewsSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the News service. Represents a row in the &quot;news_News&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>NewsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsImpl}.
 * </p>
 *
 * @author Andrey
 * @see NewsImpl
 * @generated
 */
@JSON(strict = true)
public class NewsModelImpl extends BaseModelImpl<News> implements NewsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a news model instance should use the <code>News</code> interface instead.
	 */
	public static final String TABLE_NAME = "news_News";

	public static final Object[][] TABLE_COLUMNS = {
		{"id_", Types.BIGINT}, {"title", Types.VARCHAR},
		{"body", Types.VARCHAR}, {"date_", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("body", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table news_News (id_ LONG not null primary key,title VARCHAR(75) null,body VARCHAR(75) null,date_ DATE null)";

	public static final String TABLE_SQL_DROP = "drop table news_News";

	public static final String ORDER_BY_JPQL = " ORDER BY news.date ASC";

	public static final String ORDER_BY_SQL = " ORDER BY news_News.date_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.blade.samples.servicebuilder.service.util.PropsUtil.get(
			"value.object.entity.cache.enabled.cz.actum.portlet.model.News"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		com.liferay.blade.samples.servicebuilder.service.util.PropsUtil.get(
			"value.object.finder.cache.enabled.cz.actum.portlet.model.News"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static News toModel(NewsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		News model = new NewsImpl();

		model.setId(soapModel.getId());
		model.setTitle(soapModel.getTitle());
		model.setBody(soapModel.getBody());
		model.setDate(soapModel.getDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<News> toModels(NewsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<News> models = new ArrayList<News>(soapModels.length);

		for (NewsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.liferay.blade.samples.servicebuilder.service.util.PropsUtil.get(
			"lock.expiration.time.cz.actum.portlet.model.News"));

	public NewsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return News.class;
	}

	@Override
	public String getModelClassName() {
		return News.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<News, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<News, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((News)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<News, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<News, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((News)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<News, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<News, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, News>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			News.class.getClassLoader(), News.class, ModelWrapper.class);

		try {
			Constructor<News> constructor =
				(Constructor<News>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<News, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<News, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<News, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<News, Object>>();
		Map<String, BiConsumer<News, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<News, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object idObject) {
					news.setId((Long)idObject);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object titleObject) {
					news.setTitle((String)titleObject);
				}

			});
		attributeGetterFunctions.put(
			"body",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getBody();
				}

			});
		attributeSetterBiConsumers.put(
			"body",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object bodyObject) {
					news.setBody((String)bodyObject);
				}

			});
		attributeGetterFunctions.put(
			"date",
			new Function<News, Object>() {

				@Override
				public Object apply(News news) {
					return news.getDate();
				}

			});
		attributeSetterBiConsumers.put(
			"date",
			new BiConsumer<News, Object>() {

				@Override
				public void accept(News news, Object dateObject) {
					news.setDate((Date)dateObject);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getBody() {
		if (_body == null) {
			return "";
		}
		else {
			return _body;
		}
	}

	@Override
	public void setBody(String body) {
		_body = body;
	}

	@JSON
	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, News.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public News toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, News>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NewsImpl newsImpl = new NewsImpl();

		newsImpl.setId(getId());
		newsImpl.setTitle(getTitle());
		newsImpl.setBody(getBody());
		newsImpl.setDate(getDate());

		newsImpl.resetOriginalValues();

		return newsImpl;
	}

	@Override
	public int compareTo(News news) {
		int value = 0;

		value = DateUtil.compareTo(getDate(), news.getDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof News)) {
			return false;
		}

		News news = (News)object;

		long primaryKey = news.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<News> toCacheModel() {
		NewsCacheModel newsCacheModel = new NewsCacheModel();

		newsCacheModel.id = getId();

		newsCacheModel.title = getTitle();

		String title = newsCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			newsCacheModel.title = null;
		}

		newsCacheModel.body = getBody();

		String body = newsCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			newsCacheModel.body = null;
		}

		Date date = getDate();

		if (date != null) {
			newsCacheModel.date = date.getTime();
		}
		else {
			newsCacheModel.date = Long.MIN_VALUE;
		}

		return newsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<News, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<News, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((News)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<News, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<News, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<News, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((News)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, News>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _id;
	private String _title;
	private String _body;
	private Date _date;
	private News _escapedModel;

}